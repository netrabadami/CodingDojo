1. Create 5 books with the following names: C Sharp, Java, Python, PHP, Ruby
    Books.objects.create(title = "C Sharp",desc = "C Sharp book")
    Books.objects.create(title = "Java",desc = "Java book")
    Books.objects.create(title = "Python",desc = "Python  book")
    Books.objects.create(title = "PHP",desc = "PHP book")
    Books.objects.create(title = "Ruby",desc = "Ruby book")

2. Create 5 different authors: Jane Austen, Emily Dickinson, Fyodor Dostoevksy, William Shakespeare, Lau Tzu
    Authors.objects.create(first_name="Jane",last_name="Austen")
    Authors.objects.create(first_name="Emily",last_name="Dickinson")
    Authors.objects.create(first_name="Fyodor",last_name="Dostoevksy")
    Authors.objects.create(first_name="William",last_name="Shakespeare")
    Authors.objects.create(first_name="Lau",last_name="Tzu")

3. Add a new text field in the authors table called 'notes'.
   Create and run the migration files to update the table in your database.
    
    python manage.py makemigrartions
    You are trying to add a non-nullable field 'note' to authors without a default; we can't do that (the database needs something to populate existing rows).
    Please select a fix:
        1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
        2) Quit, and let me add a default in models.py
    Select an option: 1
    Please enter the default value now, as valid Python
    The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
    Type 'exit' to exit this prompt
    >>> "Notes on my Books"
    Migrations for 'manyToMany_apps':
    manyToMany_apps/migrations/0002_authors_note.py
        - Add field note to authors

     python manage.py migrate
        Operations to perform:
        Apply all migrations: admin, auth, contenttypes, manyToMany_apps, sessions
        Running migrations:
        Applying manyToMany_apps.0002_authors_note... OK

4. Change the name of the C Sharp book to C#
    edit = Books.objects.get(id=1)
    edit.title = "C#"
    edit.save()

5. Change the first name of the 4th author to Bill
    update = Authors.objects.get(id=4)
    update.first_name = "Bill"
    update.save()

6. Assign the first author to the first 2 books
	author = Authors.objects.get(id=1)
	author.books.add(Books.objects.get(id=1),Books.objects.get(id=2))

7. Assign the second author to the first 3 books
    author = Authors.objects.get(id=2)
    author.books.add(Books.objects.get(id=1),Books.objects.get(id=2),Books.objects.get(id=3))

8. Assign the third author to the first 4 books
    author3=Authors.objects.get(id=3)
    author3.books.add(Books.objects.get(id=1),Books.objects.get(id=2),Books.objects.get(id=3),Books.objects.get(id=4))

9. Assign the fourth author to the firdt 5 books
    author4 = Authors.objects.get(id=4)
    author4.books.add(Books.objects.get(id=1),Books.objects.get(id=2),Books.objects.get(id=3),Books.objects.get(id=4),Books.objects.get(id=5))

10. Retrieve all the authors for the 3rd book
    Books.objects.get(id=3).author.all().values()

11. Remove the first author of the 3rd book
    Books.objects.get(id=3).author.remove(Authors.objects.get(id=2))

12. Add the 5th author as one of the authors of the 2nd book
    Authors.objects.get(id=5).books.add(Books.objects.get(id=2))
    
13. Find all the books that the 3rd author is part of
    Authors.objects.get(id=3).books.all().values()

14.Find all the authors that contributed to the 5th book
    Books.objects.get(id=5).author.all().values()
